# Welcome to Graphcool!
#
# This file is the main config file for your Graphcool Service.
# It's very minimal at this point and uses default values.
# We've included a hello world function here.
# Just run `graphcool deploy` to have the first running Graphcool Service.
#
# Check out some examples:
#    https://github.com/graphcool/framework/tree/master/examples
#
# Here are the reference docs of this definition format:
# https://www.graph.cool/docs/reference/service-definition/graphcool.yml-foatho8aip
#
# Happy Coding!


# In the types.graphql you define your data schema
types: ./types.graphql


functions:
  signup:
   type: resolver
   schema: src/email-password/signup.graphql
   handler:
     code: src/email-password/signup.ts

  authenticate:
   type: resolver
   schema: src/email-password/authenticate.graphql
   handler:
     code: src/email-password/authenticate.ts

  loggedInUser:
   type: resolver
   schema: src/email-password/loggedInUser.graphql
   handler:
     code: src/email-password/loggedInUser.ts

  # Board
  updateBoardRelations:
      type: resolver
      schema: src/board/updateBoardRelations.graphql
      handler:
        code: src/board/updateBoardRelations.js

  # List
  updateListRelations:
      type: resolver
      schema: src/list/updateListRelations.graphql
      handler:
        code: src/list/updateListRelations.js

  # Task
  updateTaskCustom:
    type: resolver
    schema: src/task/updateTaskCustom.graphql
    handler:
      code: src/task/updateTaskCustom.js

  updateTaskCustomRelations:
    type: resolver
    schema: src/task/updateTaskCustomRelations.graphql
    handler:
      code: src/task/updateTaskCustomRelations.js

  updateTaskRelations:
    type: resolver
    schema: src/task/updateTaskRelations.graphql
    handler:
      code: src/task/updateTaskRelations.js

  # Invite
  acceptInvite:
    type: resolver
    schema: src/invite/acceptInvite.graphql
    handler:
      code: src/invite/acceptInvite.js

  declineInvite:
      type: resolver
      schema: src/mutations/invite/declineInvite.graphql
      handler:
        code: src/mutations/invite/declineInvite.js

  createInviteCustom:
    type: resolver
    schema: src/invite/createInviteCustom.graphql
    handler:
      code: src/invite/createInviteCustom.js

  beforeTaskCreate:
    handler:
      code: ./hooks/beforeTaskCreate.js
    type: operationBefore
    operation: Task.create

# Model/Relation permissions are used to limit the API access
# To take the burden of thinking about those while development, we
# preconfigured the wildcard ("*") permission that allows everything
# Read more here:
# https://www.graph.cool/docs/reference/service-definition/graphcool.yml-foatho8aip#permissions
# https://www.graph.cool/docs/reference/auth/authorization/overview-iegoo0heez
permissions:

  # User
  - operation: User.create
    authenticated: true
  - operation: User.read
    authenticated: false
  - operation: User.update
    authenticated: true
  - operation: User.delete
    authenticated: true

  # Board
  - operation: Board.create
    authenticated: true
    query: ./src/permissions/Board.graphql
  - operation: Board.read
    authenticated: false
  - operation: Board.update
    authenticated: true
    query: ./src/permissions/Board.graphql
  - operation: Board.delete
    authenticated: true
    query: ./src/permissions/Board.graphql

  # List
  - operation: List.create
    authenticated: true
  - operation: List.read
    authenticated: false
  - operation: List.update
    authenticated: true
  - operation: List.delete
    authenticated: true

  # Task
  - operation: Task.create
    authenticated: false
  - operation: Task.read
    authenticated: false
  - operation: Task.update
    authenticated: false
  - operation: Task.delete
    authenticated: false

  # Comment
  - operation: Comment.create
    authenticated: true
    query: ./src/permissions/Comment.graphql
  - operation: Comment.read
    authenticated: false
  - operation: Comment.update
    authenticated: true
    query: ./src/permissions/Comment.graphql
  - operation: Comment.delete
    authenticated: true
    query: ./src/permissions/Comment.graphql

  # Label
  - operation: Label.create
    authenticated: true
  - operation: Label.read
    authenticated: false
  - operation: Label.update
    authenticated: true
  - operation: Label.delete
    authenticated: true

  # Invite
  - operation: Invite.create
    authenticated: true
  - operation: Invite.read
    authenticated: false
  - operation: Invite.update
    authenticated: true
  - operation: Invite.delete
    authenticated: true

  # Relations
  - operation: UserAuthorOfBoards.connect
    authenticated: false
  - operation: UserAuthorOfBoards.disconnect
    authenticated: false

  - operation: UsersAndBoards.connect
    authenticated: false
  - operation: UsersAndBoards.disconnect
    authenticated: false

  - operation: UserOfTasks.connect
    authenticated: false
  - operation: UserOfTasks.disconnect
    authenticated: false

  - operation: UserOfInvites.connect
    authenticated: false
  - operation: UserOfInvites.disconnect
    authenticated: false

  - operation: BoardOfLists.connect
    authenticated: false
  - operation: BoardOfLists.disconnect
    authenticated: false

  - operation: BoardOfTasks.connect
    authenticated: false
  - operation: BoardOfTasks.disconnect
    authenticated: false

  - operation: ListOfTasks.connect
    authenticated: false
  - operation: ListOfTasks.disconnect
    authenticated: false

  - operation: TasksAndLabels.connect
    authenticated: false
  - operation: TasksAndLabels.disconnect
    authenticated: false

  - operation: UserOfComments.connect
    authenticated: false
  - operation: UserOfComments.disconnect
    authenticated: false

  - operation: TaskOfComments.connect
    authenticated: false
  - operation: TaskOfComments.disconnect
    authenticated: false

#  - operation: "*"


# Your root tokens used for functions to get full access to the API
# Read more here:
# https://www.graph.cool/docs/reference/auth/authentication/authentication-tokens-eip7ahqu5o
# rootTokens:
#   - mytoken


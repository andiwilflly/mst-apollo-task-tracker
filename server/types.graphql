type User @model {
    # Required system field:
    id: ID! @isUnique # read-only (managed by Graphcool)

    # Optional system fields (remove if not needed):
    createdAt: DateTime! # read-only (managed by Graphcool)
    updatedAt: DateTime! # read-only (managed by Graphcool)

    email: String! @isUnique
    password: String!

    myBoards: [Board!]! @relation(name: "UserAuthorOfBoards")
    boards: [Board!]! @relation(name: "UsersAndBoards")
    tasks: [Task!]! @relation(name: "UserOfTasks")
    invites: [Invite!]! @relation(name: "UserOfInvites")
}


type Board @model {
    # Required system field:
    id: ID! @isUnique # read-only (managed by Graphcool)

    # Optional system fields (remove if not needed):
    createdAt: DateTime! # read-only (managed by Graphcool)
    updatedAt: DateTime! # read-only (managed by Graphcool)

    name: String! @isUnique
    description: String!
    background: String

    users: [User!]! @relation(name: "UsersAndBoards", onDelete: CASCADE)
    author: User! @relation(name: "UserAuthorOfBoards", onDelete: CASCADE)
    lists: [List!]! @relation(name: "BoardOfLists", onDelete: CASCADE)
    tasks: [Task!]! @relation(name: "BoardOfTasks", onDelete: CASCADE)
}


type List @model {
    # Required system field:
    id: ID! @isUnique # read-only (managed by Graphcool)

    # Optional system fields (remove if not needed):
    createdAt: DateTime! # read-only (managed by Graphcool)
    updatedAt: DateTime! # read-only (managed by Graphcool)

    name: String!

    board: Board! @relation(name: "BoardOfLists", onDelete: CASCADE)
    tasks: [Task!]! @relation(name: "ListOfTasks", onDelete: CASCADE)
}


type Task @model {
    # Required system field:
    id: ID! @isUnique # read-only (managed by Graphcool)

    # Optional system fields (remove if not needed):
    createdAt: DateTime! # read-only (managed by Graphcool)
    updatedAt: DateTime! # read-only (managed by Graphcool)

    changedAt: String @migrationValue(value: "0") # Need to trigger Task change event when changed only Task relations

    title: String!
    description: String!

    author: User! @relation(name: "UserOfTasks", onDelete: CASCADE)
    list: List! @relation(name: "ListOfTasks", onDelete: CASCADE)
    board: Board! @relation(name: "BoardOfTasks", onDelete: CASCADE)
    labels: [Label!]! @relation(name: "TasksAndLabels", onDelete: CASCADE)
}


type Label @model {
    # Required system field:
    id: ID! @isUnique # read-only (managed by Graphcool)

    createdAt: DateTime! # read-only (managed by Graphcool)
    updatedAt: DateTime! # read-only (managed by Graphcool)

    tasks: [Task!]! @relation(name: "TasksAndLabels", onDelete: CASCADE)

    color: String!
}


type Invite @model {
    # Required system field:
    id: ID! @isUnique # read-only (managed by Graphcool)

    createdAt: DateTime! # read-only (managed by Graphcool)
    updatedAt: DateTime! # read-only (managed by Graphcool)

    user: User! @relation(name: "UserOfInvites", onDelete: CASCADE)

    authorId: String! @migrationValue(value: "catch22")
    boardId: String!
    emailInviteReceiver: String!
}

